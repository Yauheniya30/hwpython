# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу:
# (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений необходимо
# запускать скрипт с параметрами.

# p1 = выработка в часах, 160
# p2 = ставка в час, 10
# p3 = премия, 400

# from sys import argv
#
# print(argv)
# print('f ar1 = {argv[1]}, ar2 = {argv[2]}, ar3 = {argv[3]} ')
#
# p1, p2, p3 = map(int, argv[1:])
# print(type(p1))
# print(p1 * p2 + p3)

# *********************************************************************************************************
# 2.Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше
# предыдущегоэлемента.Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования
# используйте генератор.Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

# n = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
#
# new = [n[i] for i in range(1, len(n)) if n[i] > n[i - 1]]
# print(new)
# ****************************************************************************************************
# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
#  Подсказка: используйте функцию range() и генератор.

# new = [i for i in range(20, 240) if i % 20 == 0]
# new_1 = [i for i in range(20, 240) if i % 21 == 0]
# print(new)
# print(new_1)

# **********************************************************************************************************
# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке их следования
# в исходном списке. Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

# n = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# new = [i for i in n if n.count(i) == 1]
# print(new)
#
# new = [i for i in range(1, len(n)) if n.count(i) == 1]
# print(new)
#
# new = [i for i in range(1, 45) if n.count(i) == 1]
# print(new)
# *********************************************************************************************************
# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления
# произведения всех элементов списка.
# Подсказка: использовать функцию reduce()

# from functools import reduce
#
# new = [i for i in range(100, 1001) if i % 2 == 0]
# print(new)
# print(reduce(lambda a, b: a * b, new))

# ****************************************************************************************************************
# 6. Реализовать два небольших скрипта:
#
#     итератор, генерирующий целые числа, начиная с указанного;
#     итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл
# не должен быть бесконечным. Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа,
# # начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором
# # повторение элементов списка прекратится.

# from sys import argv
# from itertools import count, cycle
#
# print(argv)
# print('f ar1 = {argv[1]}, ar2 = {argv[2]}, ar3 = {argv[3]}, ar4 = {argv[4]')
# p1, p2, p3, p4 = map(int, argv[1:])

# for el in count(p1, p2):
#     print(el)
#     if el > p3:
#         break

# li = [5, 9, 45]
# i = 0
# for el2 in cycle(li):
#     i += 1
#     if i > p4:
#         break

#
# ***************************************************************************************************************
# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
#     Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.



# def fact(n):
#     res = 1
#     if n == 0:
#         yield f'{n}! = {1}'
#     for i in range(1, n + 1):
#         res *= i
#         yield f'{i}! = {res}'
#
#
# n = int(input('Enter the number:'))
# for el in fact(n):
#     print(el)






